#ifndef GENERATED_ASN1SCC_SM_1301_RPC_H
#define GENERATED_ASN1SCC_SM_1301_RPC_H
/*
Code automatically generated by asn1scc tool
*/
#include "can_packet.h"
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    CANPacket packet;
} SendPacket;

#define SendPacket_REQUIRED_BYTES_FOR_ENCODING       71 
#define SendPacket_REQUIRED_BITS_FOR_ENCODING        566
#define SendPacket_REQUIRED_BYTES_FOR_ACN_ENCODING   71 
#define SendPacket_REQUIRED_BITS_FOR_ACN_ENCODING    566
#define SendPacket_REQUIRED_BYTES_FOR_XER_ENCODING   341

void SendPacket_Initialize(SendPacket* pVal);
flag SendPacket_IsConstraintValid(const SendPacket* val, int* pErrCode);


typedef struct {
} Connect;

#define Connect_REQUIRED_BYTES_FOR_ENCODING       0 
#define Connect_REQUIRED_BITS_FOR_ENCODING        0
#define Connect_REQUIRED_BYTES_FOR_ACN_ENCODING   0 
#define Connect_REQUIRED_BITS_FOR_ACN_ENCODING    0
#define Connect_REQUIRED_BYTES_FOR_XER_ENCODING   19

void Connect_Initialize(Connect* pVal);
flag Connect_IsConstraintValid(const Connect* val, int* pErrCode);


typedef struct {
} Disconnect;

#define Disconnect_REQUIRED_BYTES_FOR_ENCODING       0 
#define Disconnect_REQUIRED_BITS_FOR_ENCODING        0
#define Disconnect_REQUIRED_BYTES_FOR_ACN_ENCODING   0 
#define Disconnect_REQUIRED_BITS_FOR_ACN_ENCODING    0
#define Disconnect_REQUIRED_BYTES_FOR_XER_ENCODING   25

void Disconnect_Initialize(Disconnect* pVal);
flag Disconnect_IsConstraintValid(const Disconnect* val, int* pErrCode);


typedef enum {
    ok = 0,
    error = 1
} Response;

#define Response_REQUIRED_BYTES_FOR_ENCODING       1 
#define Response_REQUIRED_BITS_FOR_ENCODING        1
#define Response_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define Response_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define Response_REQUIRED_BYTES_FOR_XER_ENCODING   28

void Response_Initialize(Response* pVal);
flag Response_IsConstraintValid(const Response* val, int* pErrCode);
#ifndef ERR_Response_unknown_enumeration_value 
#define ERR_Response_unknown_enumeration_value		1002  /**/
#endif
#ifndef ERR_Response 
#define ERR_Response		1001  /**/
#endif

typedef struct {
    Response resp;
} RespPacket;

#define RespPacket_REQUIRED_BYTES_FOR_ENCODING       1 
#define RespPacket_REQUIRED_BITS_FOR_ENCODING        1
#define RespPacket_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define RespPacket_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define RespPacket_REQUIRED_BYTES_FOR_XER_ENCODING   45

void RespPacket_Initialize(RespPacket* pVal);
flag RespPacket_IsConstraintValid(const RespPacket* val, int* pErrCode);


typedef asn1SccUint SetBitRate_bitRate;

#define SetBitRate_bitRate_REQUIRED_BYTES_FOR_ENCODING       3 
#define SetBitRate_bitRate_REQUIRED_BITS_FOR_ENCODING        20
#define SetBitRate_bitRate_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define SetBitRate_bitRate_REQUIRED_BITS_FOR_ACN_ENCODING    20
#define SetBitRate_bitRate_REQUIRED_BYTES_FOR_XER_ENCODING   61

void SetBitRate_bitRate_Initialize(SetBitRate_bitRate* pVal);
flag SetBitRate_bitRate_IsConstraintValid(const SetBitRate_bitRate* val, int* pErrCode);
#ifndef ERR_SetBitRate_bitRate 
#define ERR_SetBitRate_bitRate		1003  /*(0 .. 1000000)*/
#endif

typedef struct {
    SetBitRate_bitRate bitRate;
} SetBitRate;

#define SetBitRate_REQUIRED_BYTES_FOR_ENCODING       3 
#define SetBitRate_REQUIRED_BITS_FOR_ENCODING        20
#define SetBitRate_REQUIRED_BYTES_FOR_ACN_ENCODING   3 
#define SetBitRate_REQUIRED_BITS_FOR_ACN_ENCODING    20
#define SetBitRate_REQUIRED_BYTES_FOR_XER_ENCODING   64

void SetBitRate_Initialize(SetBitRate* pVal);
flag SetBitRate_IsConstraintValid(const SetBitRate* val, int* pErrCode);


typedef struct {
    enum {
        Command_NONE,
        connect_PRESENT,
        disconnect_PRESENT,
        sbr_PRESENT,
        sp_PRESENT 
    } kind;
    union {
        Connect connect;
        Disconnect disconnect;
        SetBitRate sbr;
        SendPacket sp;
    } u; 
} Command;

#define Command_REQUIRED_BYTES_FOR_ENCODING       72 
#define Command_REQUIRED_BITS_FOR_ENCODING        569
#define Command_REQUIRED_BYTES_FOR_ACN_ENCODING   72 
#define Command_REQUIRED_BITS_FOR_ACN_ENCODING    569
#define Command_REQUIRED_BYTES_FOR_XER_ENCODING   344

void Command_Initialize(Command* pVal);
flag Command_IsConstraintValid(const Command* val, int* pErrCode);
#ifndef ERR_Command_unknown_choice_index 
#define ERR_Command_unknown_choice_index		1004  /**/
#endif

typedef struct {
    Command cmd;
} CmdPacket;

#define CmdPacket_REQUIRED_BYTES_FOR_ENCODING       72 
#define CmdPacket_REQUIRED_BITS_FOR_ENCODING        569
#define CmdPacket_REQUIRED_BYTES_FOR_ACN_ENCODING   72 
#define CmdPacket_REQUIRED_BITS_FOR_ACN_ENCODING    569
#define CmdPacket_REQUIRED_BYTES_FOR_XER_ENCODING   359

void CmdPacket_Initialize(CmdPacket* pVal);
flag CmdPacket_IsConstraintValid(const CmdPacket* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag SendPacket_Encode(const SendPacket* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SendPacket_Decode(SendPacket* pVal, BitStream* pBitStrm, int* pErrCode);
flag SendPacket_XER_Encode(const SendPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendPacket_XER_Decode(SendPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SendPacket_BER_Encode(const SendPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendPacket_BER_Decode(SendPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Connect_Encode(const Connect* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Connect_Decode(Connect* pVal, BitStream* pBitStrm, int* pErrCode);
flag Connect_XER_Encode(const Connect* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Connect_XER_Decode(Connect* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Connect_BER_Encode(const Connect* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Connect_BER_Decode(Connect* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Disconnect_Encode(const Disconnect* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Disconnect_Decode(Disconnect* pVal, BitStream* pBitStrm, int* pErrCode);
flag Disconnect_XER_Encode(const Disconnect* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Disconnect_XER_Decode(Disconnect* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Disconnect_BER_Encode(const Disconnect* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Disconnect_BER_Decode(Disconnect* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Response_Encode(const Response* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Response_Decode(Response* pVal, BitStream* pBitStrm, int* pErrCode);
flag Response_XER_Encode(const Response* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Response_XER_Decode(Response* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Response_BER_Encode(const Response* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Response_BER_Decode(Response* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RespPacket_Encode(const RespPacket* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RespPacket_Decode(RespPacket* pVal, BitStream* pBitStrm, int* pErrCode);
flag RespPacket_XER_Encode(const RespPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RespPacket_XER_Decode(RespPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RespPacket_BER_Encode(const RespPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RespPacket_BER_Decode(RespPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SetBitRate_bitRate_Encode(const SetBitRate_bitRate* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_bitRate_Decode(SetBitRate_bitRate* pVal, BitStream* pBitStrm, int* pErrCode);
flag SetBitRate_bitRate_XER_Encode(const SetBitRate_bitRate* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_bitRate_XER_Decode(SetBitRate_bitRate* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SetBitRate_bitRate_BER_Encode(const SetBitRate_bitRate* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_bitRate_BER_Decode(SetBitRate_bitRate* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SetBitRate_Encode(const SetBitRate* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_Decode(SetBitRate* pVal, BitStream* pBitStrm, int* pErrCode);
flag SetBitRate_XER_Encode(const SetBitRate* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_XER_Decode(SetBitRate* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SetBitRate_BER_Encode(const SetBitRate* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetBitRate_BER_Decode(SetBitRate* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Command_Encode(const Command* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Command_Decode(Command* pVal, BitStream* pBitStrm, int* pErrCode);
flag Command_XER_Encode(const Command* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Command_XER_Decode(Command* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Command_BER_Encode(const Command* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Command_BER_Decode(Command* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CmdPacket_Encode(const CmdPacket* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CmdPacket_Decode(CmdPacket* pVal, BitStream* pBitStrm, int* pErrCode);
flag CmdPacket_XER_Encode(const CmdPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CmdPacket_XER_Decode(CmdPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CmdPacket_BER_Encode(const CmdPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CmdPacket_BER_Decode(CmdPacket* pVal, ByteStream* pByteStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_ok	ok
#define ENUM_error	error
#define CHOICE_connect_PRESENT	Command::connect_PRESENT
#define CHOICE_disconnect_PRESENT	Command::disconnect_PRESENT
#define CHOICE_sbr_PRESENT	Command::sbr_PRESENT
#define CHOICE_sp_PRESENT	Command::sp_PRESENT

#endif

#endif
