#ifndef GENERATED_ASN1SCC_CAN_PACKET_H
#define GENERATED_ASN1SCC_CAN_PACKET_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccUint StdId;

#define StdId_REQUIRED_BYTES_FOR_ENCODING       2 
#define StdId_REQUIRED_BITS_FOR_ENCODING        11
#define StdId_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define StdId_REQUIRED_BITS_FOR_ACN_ENCODING    11
#define StdId_REQUIRED_BYTES_FOR_XER_ENCODING   35

void StdId_Initialize(StdId* pVal);
flag StdId_IsConstraintValid(const StdId* val, int* pErrCode);
#ifndef ERR_StdId 
#define ERR_StdId		1001  /*(0 .. 2047)*/
#endif

typedef asn1SccUint ExtId;

#define ExtId_REQUIRED_BYTES_FOR_ENCODING       4 
#define ExtId_REQUIRED_BITS_FOR_ENCODING        32
#define ExtId_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define ExtId_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define ExtId_REQUIRED_BYTES_FOR_XER_ENCODING   35

void ExtId_Initialize(ExtId* pVal);
flag ExtId_IsConstraintValid(const ExtId* val, int* pErrCode);
#ifndef ERR_ExtId 
#define ERR_ExtId		1002  /*(0 .. 2147483647)*/
#endif

typedef struct {
    enum {
        Id_NONE,
        stdId_PRESENT,
        extId_PRESENT 
    } kind;
    union {
        StdId stdId;
        ExtId extId;
    } u; 
} Id;

#define Id_REQUIRED_BYTES_FOR_ENCODING       5 
#define Id_REQUIRED_BITS_FOR_ENCODING        34
#define Id_REQUIRED_BYTES_FOR_ACN_ENCODING   5 
#define Id_REQUIRED_BITS_FOR_ACN_ENCODING    34
#define Id_REQUIRED_BYTES_FOR_XER_ENCODING   44

void Id_Initialize(Id* pVal);
flag Id_IsConstraintValid(const Id* val, int* pErrCode);
#ifndef ERR_Id_unknown_choice_index 
#define ERR_Id_unknown_choice_index		1003  /**/
#endif

typedef asn1SccUint DLC;

#define DLC_REQUIRED_BYTES_FOR_ENCODING       1 
#define DLC_REQUIRED_BITS_FOR_ENCODING        4
#define DLC_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define DLC_REQUIRED_BITS_FOR_ACN_ENCODING    4
#define DLC_REQUIRED_BYTES_FOR_XER_ENCODING   31

void DLC_Initialize(DLC* pVal);
flag DLC_IsConstraintValid(const DLC* val, int* pErrCode);
#ifndef ERR_DLC 
#define ERR_DLC		1004  /*(0 .. 8)*/
#endif

typedef struct {    int nCount; 
    
    byte arr[8];
} Data;

#define Data_REQUIRED_BYTES_FOR_ENCODING       9 
#define Data_REQUIRED_BITS_FOR_ENCODING        68
#define Data_REQUIRED_BYTES_FOR_ACN_ENCODING   9 
#define Data_REQUIRED_BITS_FOR_ACN_ENCODING    68
#define Data_REQUIRED_BYTES_FOR_XER_ENCODING   29

void Data_Initialize(Data* pVal);
flag Data_IsConstraintValid(const Data* val, int* pErrCode);
#ifndef ERR_Data 
#define ERR_Data		1005  /*(SIZE(0 .. 8))*/
#endif

typedef enum {
    dataFrame = 0,
    remoteRequestFrame = 1
} RTR;

#define RTR_REQUIRED_BYTES_FOR_ENCODING       1 
#define RTR_REQUIRED_BITS_FOR_ENCODING        1
#define RTR_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define RTR_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define RTR_REQUIRED_BYTES_FOR_XER_ENCODING   50

void RTR_Initialize(RTR* pVal);
flag RTR_IsConstraintValid(const RTR* val, int* pErrCode);
#ifndef ERR_RTR_unknown_enumeration_value 
#define ERR_RTR_unknown_enumeration_value		1007  /**/
#endif
#ifndef ERR_RTR 
#define ERR_RTR		1006  /**/
#endif

typedef struct {
    Id id;
    RTR rtr;
    flag res;
    DLC dlc;
    Data data;
    struct {
        unsigned int res:1;
    } exist;
} CANPacket20B;

#define CANPacket20B_REQUIRED_BYTES_FOR_ENCODING       14 
#define CANPacket20B_REQUIRED_BITS_FOR_ENCODING        109
#define CANPacket20B_REQUIRED_BYTES_FOR_ACN_ENCODING   14 
#define CANPacket20B_REQUIRED_BITS_FOR_ACN_ENCODING    109
#define CANPacket20B_REQUIRED_BYTES_FOR_XER_ENCODING   207

void CANPacket20B_Initialize(CANPacket20B* pVal);
flag CANPacket20B_IsConstraintValid(const CANPacket20B* val, int* pErrCode);


typedef asn1SccUint DLCFD;

#define DLCFD_REQUIRED_BYTES_FOR_ENCODING       1 
#define DLCFD_REQUIRED_BITS_FOR_ENCODING        7
#define DLCFD_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define DLCFD_REQUIRED_BITS_FOR_ACN_ENCODING    7
#define DLCFD_REQUIRED_BYTES_FOR_XER_ENCODING   35

void DLCFD_Initialize(DLCFD* pVal);
flag DLCFD_IsConstraintValid(const DLCFD* val, int* pErrCode);
#ifndef ERR_DLCFD 
#define ERR_DLCFD		1008  /*((((((((0 .. 8) | (12)) | (16)) | (20)) | (24)) | (32)) | (48)) | (64))*/
#endif

typedef struct {    int nCount; 
    
    byte arr[64];
} DataFD;

#define DataFD_REQUIRED_BYTES_FOR_ENCODING       65 
#define DataFD_REQUIRED_BITS_FOR_ENCODING        519
#define DataFD_REQUIRED_BYTES_FOR_ACN_ENCODING   65 
#define DataFD_REQUIRED_BITS_FOR_ACN_ENCODING    519
#define DataFD_REQUIRED_BYTES_FOR_XER_ENCODING   145

void DataFD_Initialize(DataFD* pVal);
flag DataFD_IsConstraintValid(const DataFD* val, int* pErrCode);
#ifndef ERR_DataFD 
#define ERR_DataFD		1009  /*(SIZE((((((((0 .. 8) | (12)) | (16)) | (20)) | (24)) | (32)) | (48)) | (64)))*/
#endif

typedef struct {
    Id id;
    flag res;
    flag brs;
    flag esi;
    DLCFD dlc;
    DataFD data;
    struct {
        unsigned int res:1;
    } exist;
} CANPacketFD;

#define CANPacketFD_REQUIRED_BYTES_FOR_ENCODING       71 
#define CANPacketFD_REQUIRED_BITS_FOR_ENCODING        564
#define CANPacketFD_REQUIRED_BYTES_FOR_ACN_ENCODING   71 
#define CANPacketFD_REQUIRED_BITS_FOR_ACN_ENCODING    564
#define CANPacketFD_REQUIRED_BYTES_FOR_XER_ENCODING   315

void CANPacketFD_Initialize(CANPacketFD* pVal);
flag CANPacketFD_IsConstraintValid(const CANPacketFD* val, int* pErrCode);


typedef struct {
    enum {
        CANPacket_NONE,
        p20b_PRESENT,
        pfd_PRESENT 
    } kind;
    union {
        CANPacket20B p20b;
        CANPacketFD pfd;
    } u; 
} CANPacket;

#define CANPacket_REQUIRED_BYTES_FOR_ENCODING       71 
#define CANPacket_REQUIRED_BITS_FOR_ENCODING        566
#define CANPacket_REQUIRED_BYTES_FOR_ACN_ENCODING   71 
#define CANPacket_REQUIRED_BITS_FOR_ACN_ENCODING    566
#define CANPacket_REQUIRED_BYTES_FOR_XER_ENCODING   322

void CANPacket_Initialize(CANPacket* pVal);
flag CANPacket_IsConstraintValid(const CANPacket* val, int* pErrCode);
#ifndef ERR_CANPacket_unknown_choice_index 
#define ERR_CANPacket_unknown_choice_index		1010  /**/
#endif

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag StdId_Encode(const StdId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag StdId_Decode(StdId* pVal, BitStream* pBitStrm, int* pErrCode);
flag StdId_XER_Encode(const StdId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StdId_XER_Decode(StdId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StdId_BER_Encode(const StdId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StdId_BER_Decode(StdId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ExtId_Encode(const ExtId* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag ExtId_Decode(ExtId* pVal, BitStream* pBitStrm, int* pErrCode);
flag ExtId_XER_Encode(const ExtId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ExtId_XER_Decode(ExtId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ExtId_BER_Encode(const ExtId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ExtId_BER_Decode(ExtId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Id_Encode(const Id* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Id_Decode(Id* pVal, BitStream* pBitStrm, int* pErrCode);
flag Id_XER_Encode(const Id* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Id_XER_Decode(Id* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Id_BER_Encode(const Id* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Id_BER_Decode(Id* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DLC_Encode(const DLC* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag DLC_Decode(DLC* pVal, BitStream* pBitStrm, int* pErrCode);
flag DLC_XER_Encode(const DLC* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DLC_XER_Decode(DLC* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DLC_BER_Encode(const DLC* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DLC_BER_Decode(DLC* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Data_Encode(const Data* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Data_Decode(Data* pVal, BitStream* pBitStrm, int* pErrCode);
flag Data_XER_Encode(const Data* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Data_XER_Decode(Data* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Data_BER_Encode(const Data* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Data_BER_Decode(Data* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RTR_Encode(const RTR* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag RTR_Decode(RTR* pVal, BitStream* pBitStrm, int* pErrCode);
flag RTR_XER_Encode(const RTR* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RTR_XER_Decode(RTR* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RTR_BER_Encode(const RTR* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RTR_BER_Decode(RTR* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacket20B_Encode(const CANPacket20B* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket20B_Decode(CANPacket20B* pVal, BitStream* pBitStrm, int* pErrCode);
flag CANPacket20B_XER_Encode(const CANPacket20B* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket20B_XER_Decode(CANPacket20B* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacket20B_BER_Encode(const CANPacket20B* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket20B_BER_Decode(CANPacket20B* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DLCFD_Encode(const DLCFD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag DLCFD_Decode(DLCFD* pVal, BitStream* pBitStrm, int* pErrCode);
flag DLCFD_XER_Encode(const DLCFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DLCFD_XER_Decode(DLCFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DLCFD_BER_Encode(const DLCFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DLCFD_BER_Decode(DLCFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DataFD_Encode(const DataFD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag DataFD_Decode(DataFD* pVal, BitStream* pBitStrm, int* pErrCode);
flag DataFD_XER_Encode(const DataFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataFD_XER_Decode(DataFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DataFD_BER_Encode(const DataFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataFD_BER_Decode(DataFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacketFD_Encode(const CANPacketFD* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacketFD_Decode(CANPacketFD* pVal, BitStream* pBitStrm, int* pErrCode);
flag CANPacketFD_XER_Encode(const CANPacketFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacketFD_XER_Decode(CANPacketFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacketFD_BER_Encode(const CANPacketFD* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacketFD_BER_Decode(CANPacketFD* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacket_Encode(const CANPacket* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket_Decode(CANPacket* pVal, BitStream* pBitStrm, int* pErrCode);
flag CANPacket_XER_Encode(const CANPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket_XER_Decode(CANPacket* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CANPacket_BER_Encode(const CANPacket* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CANPacket_BER_Decode(CANPacket* pVal, ByteStream* pByteStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define ENUM_dataFrame	dataFrame
#define ENUM_remoteRequestFrame	remoteRequestFrame
#define CHOICE_stdId_PRESENT	Id::stdId_PRESENT
#define CHOICE_extId_PRESENT	Id::extId_PRESENT
#define CHOICE_p20b_PRESENT	CANPacket::p20b_PRESENT
#define CHOICE_pfd_PRESENT	CANPacket::pfd_PRESENT

#endif

#endif
